FROM registry.access.redhat.com/ubi8/python-39:latest

USER 0

# Enable FIPS mode in the OS
RUN echo "fips=1" >> /etc/crypto-policies/config && \
    update-crypto-policies

# Install system dependencies - with FIPS-validated cryptographic modules
RUN dnf install -y \
    mesa-libGL \
    openssl \
    openssl-libs \
    && dnf clean all

# Switch back to non-root user
USER 1001

# Set working directory
WORKDIR /opt/app-root/src

# Enable FIPS mode for OpenSSL in Python
ENV OPENSSL_FORCE_FIPS_MODE=1
ENV OPENSSL_ENABLE_MD5_VERIFY=0

# Install Python dependencies with pip configured for FIPS compliance
COPY --chown=1001:0 requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Pre-download the Docling model artifacts using FIPS-compliant connections
RUN mkdir -p /opt/app-root/src/docling_models
RUN python -c "import os; os.environ['OPENSSL_FORCE_FIPS_MODE'] = '1'; \
    from docling.pipeline.standard_pdf_pipeline import StandardPdfPipeline; import pathlib; \
    StandardPdfPipeline.download_models_hf(pathlib.Path('/opt/app-root/src/docling_models'))"

# Set environment variables
ENV DOCLING_ARTIFACTS_PATH=/opt/app-root/src/docling_models
ENV PORT=8080

# Copy application code
COPY --chown=1001:0 app.py .

# Health check with appropriate timeout for FIPS-mode operations
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose the port the app will run on
EXPOSE 8080

# Command to run the application with FIPS mode enabled
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "app:app"]
